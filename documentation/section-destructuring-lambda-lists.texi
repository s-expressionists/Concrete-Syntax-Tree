@node Destructuring lambda lists
@section Destructuring lambda lists

When applied to lambda lists, the term @dfn{destructuring} means to
match its parameters against an argument list, and to generate a set of
nested @t{let} bindings.  A binding will bind a parameter of the lambda
list to its corresponding value in the argument list, or it will bind
some temporary variable.  The argument list is not known at the time of
the destructuring, so the @emph{form} of each binding will consist of
calls to destructuring functions such as @t{car} and @t{cdr}, starting
with a variable that holds the entire argument list as its value.

This kind of destructuring is used at macro-expansion time when certain
macros are expanded.  In particular @t{defmacro} and
@t{define-compiler-macro}.  The result of the destructuring is a
@t{lambda} expression for the @emph{macro function}.  This lambda
expression is then compiled to create the final macro function.

Every function defined here wraps a @var{body} form in some @t{let}
bindings.  These @t{let} bindings are determined by the parameters of a
lambda list.  Each function handles a different part of the lambda list.
The @var{client} parameter is some object representing the client.  It
is used among other things to determine which condition class to use
when a a condition needs to be signaled.  The @var{argument-variable}
parameter (abbreviated @var{av} is a symbol that, when the resulting
macro function is executed on some compound form corresponding to a
macro call, will hold the remaining part of the arguments of that macro
call yet to be processed.

Some functions have an argument called @var{tail-variable}
(abbreviated @var{tv}), which is also a symbol that is going to be
used in subsequent destructuring functions for the same purpose as
@var{argument-variable}.  Such a function is responsible for
creating an innermost @t{let} form that binds the
@var{tail-variable} symbol to the part of the argument list that
remains after the function has done its processing.  Some functions do
not need such a variable, because they do not consume any arguments,
so the remaining argument list is the same as the initial one.

@defgena{destructure-lambda-list,concrete-syntax-tree} client @
  lambda-list av tv body

Given an entire lambda list, which can be a macro lambda list or a
destructuring lambda list, wrap @var{body} in a bunch of nested
@t{let} bindings according to the parameters of the lambda list.
@end deffn

@defgena{destructure-aux-parameter,concrete-syntax-tree} client @
  parameter body

Wrap @var{body} in a @t{let} form corresponding to a single
@t{aux} parameter.  Since @t{aux} parameters are independent
of the macro-call arguments, there is no need for an
@t{argument-variable}.  The @t{aux} parameter itself
provides all the information required to determine the @t{let}
binding.
@end deffn

@defgena{destructure-aux-parameters,@toppackage{}} client parameters @
  body

Wrap @var{body} in nested @t{let} forms, each corresponding to a single
@t{aux} parameter in the list of @t{aux} parameters @var{parameters}.
Since @t{aux} parameters are independent of the macro-call argument,
there is no need for an @var{argument-variable}.  Each @t{aux} parameter
in @var{parameters} itself provides all the information required to
determine the @t{let} binding.
@end deffn

@defgena{destructure-key-parameter,@toppackage{}} client parameter av @
  body

Wrap @var{body} in a @t{let} form corresponding to a single @t{key}
parameter.
@end deffn

@defgena{destructure-key-parameters,@toppackage{}} client parameters av @
  body

Wrap @var{body} in nested @t{let} forms, each corresponding to
a single @t{key} parameter in a list of such @t{key}
parameters.  Since @t{key} parameters do not consume any
arguments, the list of arguments is the same before and after the
@t{key} parameters have been processed.  As a consequence, we do
not need a @var{tail-variable} for @t{key} parameters.
@end deffn

@defgena{destructure-rest-parameter,@toppackage{}} client parameter av @
  body

Wrap @var{body} in a @t{let} form corresponding to a
@t{rest} parameter.  Since @t{rest} parameters do not
consume any arguments, the list of arguments is the same before and
after the @t{rest} parameter has been processed.  As a
consequence, we do not need a @var{tail-variable} for @t{rest}
parameters.
@end deffn

@defgena{destructure-optional-parameter,@toppackage{}} client parameter @
  av body

Wrap @var{body} in a @t{let} form corresponding to a single
@t{optional} parameter.
@end deffn

@defgena{destructure-optional-parameters,@toppackage{}} client @
  parameters av tv body

Wrap @var{body} in nested @t{let} forms, each corresponding to
a single @t{optional} parameter in a list of such
@t{optional} parameters.  Since every @t{optional} parameter
@var{does} consume an argument, this function does take a
@t{tail-variable} argument as described above.
@end deffn

@defgena{destructure-required-parameter,@toppackage{}} client parameter @
  av body

Wrap @var{body} in one or more @t{let} forms corresponding to
a single required parameter, depending on whether the required
parameter is a simple variable or a destructuring lambda list.
@end deffn

@defgena{destructure-required-parameters,@toppackage{}} client @
  parameters av tv body

Wrap @var{body} in nested @t{let} forms, corresponding to the
list of required parameters in the list of required parameters
@var{parameters}.  Since every required parameter @var{does}
consume an argument, this function does take a @t{tail-variable}
argument as described above.
@end deffn

@defgena{destructure-parameter-group,@toppackage{}} client group av tv @
  body

Wrap @var{body} in nested @t{let} forms, corresponding to the
parameters in the list of parameter groups @t{parameter-groups}.
@end deffn
